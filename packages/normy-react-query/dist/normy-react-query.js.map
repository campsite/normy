{"version":3,"file":"normy-react-query.js","mappings":"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","sources":["webpack://NormyReactQuery/webpack/universalModuleDefinition","webpack://NormyReactQuery/./src/QueryNormalizerProvider.tsx","webpack://NormyReactQuery/./src/create-query-normalizer.ts","webpack://NormyReactQuery/external umd {\"commonjs\":\"@normy/core\",\"commonjs2\":\"@normy/core\",\"amd\":\"@normy/core\",\"root\":\"Normy\"}","webpack://NormyReactQuery/external umd {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack://NormyReactQuery/webpack/bootstrap","webpack://NormyReactQuery/webpack/runtime/compat get default export","webpack://NormyReactQuery/webpack/runtime/define property getters","webpack://NormyReactQuery/webpack/runtime/hasOwnProperty shorthand","webpack://NormyReactQuery/webpack/runtime/make namespace object","webpack://NormyReactQuery/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@normy/core\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@normy/core\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NormyReactQuery\"] = factory(require(\"@normy/core\"), require(\"react\"));\n\telse\n\t\troot[\"NormyReactQuery\"] = factory(root[\"Normy\"], root[\"React\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__normy_core__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","import * as React from 'react';\nimport { QueryClient } from '@tanstack/react-query';\nimport { NormalizerConfig } from '@normy/core';\n\nimport { createQueryNormalizer } from './create-query-normalizer';\n\nconst QueryNormalizerContext = React.createContext<\n  undefined | ReturnType<typeof createQueryNormalizer>\n>(undefined);\n\nexport const QueryNormalizerProvider = ({\n  queryClient,\n  normalizerConfig,\n  children,\n}: {\n  queryClient: QueryClient;\n  children: React.ReactNode;\n  normalizerConfig?: Omit<NormalizerConfig, 'structuralSharing'> & {\n    normalize?: boolean;\n  };\n}) => {\n  const [queryNormalizer] = React.useState(() =>\n    createQueryNormalizer(queryClient, normalizerConfig),\n  );\n\n  React.useEffect(() => {\n    queryNormalizer.subscribe();\n\n    return () => {\n      queryNormalizer.unsubscribe();\n      queryNormalizer.clear();\n    };\n  }, []);\n\n  return (\n    <QueryNormalizerContext.Provider value={queryNormalizer}>\n      {children}\n    </QueryNormalizerContext.Provider>\n  );\n};\n\nexport const useQueryNormalizer = () => {\n  const queryNormalizer = React.useContext(QueryNormalizerContext);\n\n  if (!queryNormalizer) {\n    throw new Error(\n      'No QueryNormalizer set, use QueryNormalizerProvider to set one',\n    );\n  }\n\n  return queryNormalizer;\n};\n","import type { QueryClient, QueryKey } from '@tanstack/react-query';\nimport {\n  createNormalizer,\n  type NormalizerConfig,\n  type Data,\n} from '@normy/core';\n\nconst shouldBeNormalized = (\n  globalNormalize: boolean,\n  localNormalize: boolean | undefined,\n) => {\n  if (localNormalize === undefined) {\n    return globalNormalize;\n  }\n\n  return localNormalize;\n};\n\nexport const createQueryNormalizer = (\n  queryClient: QueryClient,\n  normalizerConfig: Omit<NormalizerConfig, 'structuralSharing'> & {\n    normalize?: boolean;\n  } = {},\n) => {\n  const normalize = normalizerConfig.normalize ?? true;\n  const normalizer = createNormalizer(normalizerConfig);\n\n  let unsubscribeQueryCache: null | (() => void) = null;\n  let unsubscribeMutationCache: null | (() => void) = null;\n\n  // prevent reentrant query updates when calling setQueryData ourselves\n  let skipReentrantQueryUpdates = false;\n\n  const updateQueriesFromMutationData = (\n    mutationData: Data,\n    normalizer: ReturnType<typeof createNormalizer>,\n    queryClient: QueryClient,\n  ) => {\n    const queriesToUpdate = normalizer.getQueriesToUpdate(mutationData);\n  \n    skipReentrantQueryUpdates = true;\n    queriesToUpdate.forEach(query => {\n      queryClient.setQueryData(\n        JSON.parse(query.queryKey) as QueryKey,\n        () => query.data,\n      );\n    });\n    skipReentrantQueryUpdates = false;\n  };\n\n  return {\n    getNormalizedData: normalizer.getNormalizedData,\n    setNormalizedData: (data: Data) =>\n      updateQueriesFromMutationData(data, normalizer, queryClient),\n    clear: normalizer.clearNormalizedData,\n    subscribe: () => {\n      unsubscribeQueryCache = queryClient.getQueryCache().subscribe(event => {\n        if (event.type === 'removed') {\n          normalizer.removeQuery(JSON.stringify(event.query.queryKey));\n        } else if (\n          event.type === 'updated' &&\n          event.action.type === 'success' &&\n          event.action.data !== undefined &&\n          shouldBeNormalized(\n            normalize,\n            event.query.meta?.normalize as boolean | undefined,\n          )\n        ) {\n          updateQueriesFromMutationData(\n            event.action.data as Data, \n            normalizer, \n            queryClient\n          );\n          normalizer.setQuery(\n            JSON.stringify(event.query.queryKey),\n            event.action.data as Data,\n          );\n        }\n      });\n\n      unsubscribeMutationCache = queryClient\n        .getMutationCache()\n        .subscribe(event => {\n          if (\n            event.type === 'updated' &&\n            event.action.type === 'success' &&\n            event.action.data &&\n            shouldBeNormalized(\n              normalize,\n              event.mutation.meta?.normalize as boolean | undefined,\n            )\n          ) {\n            updateQueriesFromMutationData(\n              event.action.data as Data,\n              normalizer,\n              queryClient,\n            );\n          } else if (\n            event.type === 'updated' &&\n            event.action.type === 'pending' &&\n            (event.mutation.state?.context as { optimisticData?: Data })\n              ?.optimisticData\n          ) {\n            updateQueriesFromMutationData(\n              (event.mutation.state.context as { optimisticData: Data })\n                .optimisticData,\n              normalizer,\n              queryClient,\n            );\n          } else if (\n            event.type === 'updated' &&\n            event.action.type === 'error' &&\n            (event.mutation.state?.context as { rollbackData?: Data })\n              ?.rollbackData\n          ) {\n            updateQueriesFromMutationData(\n              (event.mutation.state.context as { rollbackData: Data })\n                .rollbackData,\n              normalizer,\n              queryClient,\n            );\n          }\n        });\n    },\n    unsubscribe: () => {\n      unsubscribeQueryCache?.();\n      unsubscribeMutationCache?.();\n      unsubscribeQueryCache = null;\n      unsubscribeMutationCache = null;\n    },\n    getObjectById: normalizer.getObjectById,\n    getQueryFragment: normalizer.getQueryFragment,\n  };\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__normy_core__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { getId } from '@normy/core';\n\nexport { createQueryNormalizer } from './create-query-normalizer';\nexport {\n  QueryNormalizerProvider,\n  useQueryNormalizer,\n} from './QueryNormalizerProvider';\n"],"names":["React","createQueryNormalizer","QueryNormalizerContext","createContext","undefined","QueryNormalizerProvider","_ref","queryClient","normalizerConfig","children","_React$useState","useState","queryNormalizer","useEffect","subscribe","unsubscribe","clear","createElement","Provider","value","useQueryNormalizer","useContext","Error","createNormalizer","shouldBeNormalized","globalNormalize","localNormalize","_normalizerConfig$nor","normalize","normalizer","unsubscribeQueryCache","unsubscribeMutationCache","skipReentrantQueryUpdates","updateQueriesFromMutationData","mutationData","queriesToUpdate","getQueriesToUpdate","forEach","query","setQueryData","JSON","parse","queryKey","data","getNormalizedData","setNormalizedData","clearNormalizedData","getQueryCache","event","_event$query$meta","type","removeQuery","stringify","action","meta","setQuery","getMutationCache","_event$mutation$meta","_event$mutation$state","_event$mutation$state2","mutation","state","context","optimisticData","rollbackData","getObjectById","getQueryFragment","getId"],"sourceRoot":""}